apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nodejs-helloworld-template
  title: NodeJS HelloWorld Service
  description: Create a HelloWorld microservice using NodeJS
  tags:
    - recommended
    - nodejs
    - javascript
    - typescript
spec:
  owner: user:christophe
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this component is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: 'Team A'
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Generating component
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}

    - id: publish
      name: Publishing to Source Code Repository
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main

    - id: register
      name: Registering to the Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: View TechDocs
        icon: techdocs
        entityRef: ${{ steps.register.output.entityRef }}/docs
